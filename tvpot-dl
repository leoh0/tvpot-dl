#!/usr/bin/env perl
#
# tvpot-dl - Download flash video from Daum tvpot
#
# Seungwon Jeong <seungwon0@gmail.com>
#
# Copyright (C) 2011 by Seungwon Jeong

use strict;

use warnings;

use 5.010;

use autodie;

use English qw< -no_match_vars >;

use LWP::Simple qw< get getstore >;

sub print_usage {
    print <<'END_USAGE';
tvpot-dl 0.3

Usage:

  tvpot-dl URL...

Argument:

  URL      URL of a tvpot video

Examples:

  tvpot-dl 'http://tvpot.daum.net/clip/ClipView.do?clipid=21319925'
  tvpot-dl 'http://music.daum.net/song/songVideo.do?songId=8443911&videoId=8446'
  tvpot-dl < url_list

Please report bugs to <seungwon0@gmail.com>.
END_USAGE
    return;
}

sub get_video_id {
    my ($url) = @_;

    my $document = get($url);
    if ( !defined $document ) {
        warn "Cannot fetch the document identified by the given URL: $url\n";
        return;
    }

    # "http://flvs.daum.net/flvPlayer.swf?vid=FlVGvam5dPM$"
    my $flv_player_url = "\Qhttp://flvs.daum.net/flvPlayer.swf\E";
    my $video_id_pattern
        = qr{" $flv_player_url [?] vid = (?<video_id>.+?) ["&]}xmsi;
    if ( $document !~ $video_id_pattern ) {
        warn "Cannot find video ID from the document.\n";
        return;
    }
    my $video_id = $LAST_PAREN_MATCH{video_id};

    return $video_id;
}

sub get_movie_url {
    my ($video_id) = @_;

    my $query_url
        = 'http://stream.tvpot.daum.net/fms/pos_query2.php'
        . '?service_id=1001&protocol=http&out_type=xml'
        . "&s_idx=$video_id";

    my $document = get($query_url);
    if ( !defined $document ) {
        warn 'Cannot fetch the document identified by the given URL: '
            . "$query_url\n";
        return;
    }

    # movieURL="http://stream.tvpot.daum.net/swxwT-/InNM6w/JgEM-E/OxDQ$$.flv"
    my $movie_url_pattern = qr{movieURL = "(?<movie_url>.+?)"}xmsi;
    if ( $document !~ $movie_url_pattern ) {
        warn "Cannot find movie URL from the document.\n";
        return;
    }
    my $movie_url = $LAST_PAREN_MATCH{movie_url};

    return $movie_url;
}

sub download_url {
    my ($url) = @_;

    # Step 1: Get video ID
    my $video_id = get_video_id($url);
    return if !defined $video_id;
    say "Video ID: $video_id";

    # Step 2: Get movie URL
    my $movie_url = get_movie_url($video_id);
    return if !defined $movie_url;
    say "Movie URL: $movie_url";

    # Step 3: Download the movie
    my $file_name = "$video_id.flv";
    say "Downloading the movie as $file_name... "
        . '(It may takes several minutes.)';
    getstore( $movie_url, $file_name );
    say 'Download completed.';

    return;
}

my @urls = @ARGV;

# tvpot-dl < url_list
if ( !-t STDIN ) {
    while ( defined( my $line = <STDIN> ) ) {
        chomp $line;

        $line =~ s/[ #] .*//xms;    # Remove comment
        $line =~ s/\s+//xmsg;       # Trim spaces

        if ( $line ne q{} ) {
            push @urls, $line;
        }
    }
}

if ( @urls < 1 ) {
    print_usage();
    exit 2;
}

for my $i ( 0 .. $#urls ) {
    my $url = $urls[$i];

    printf "[%d/%d] %s\n", $i + 1, scalar @urls, $url;

    download_url($url);

    say q{};    # Blank line
}
